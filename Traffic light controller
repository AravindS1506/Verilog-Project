module traf_light_cont(output reg[2:0]high,output reg[2:0]farm,input C,input clk,input reset);
parameter [1:0] zero=2'b00,one=2'b01,two=2'b10,three=2'b11;
reg [1:0] state,next_state;
reg red=0,yel1=0,yel2=0;
reg delay10s=0,delay3s1=0,delay3s1=0;
reg [2:0] count;

//updating the next state at the positive clock edge or negative reset 
always@(posedge clk or negedge reset) begin
if(~reset)
state<=2'b00;
else
state<=next_state;
end

//Determining next_state based on current state and delay
always@(*) begin
case(state)
zero: begin
high=3'b001;
farm=3'b100;
red=0;
yel1=0;
yel2=0;
if(C) next_state=one;
else next_state=zero;
end

one: begin
high=3'b010;
farm=3'b100;
red=0;
yel1=1;
yel2=0;
if(delay3s1) next_state=two;
else next_state=one;
end

two: begin
high=3'b100;
farm=3'b001;
red=1;
yel1=0;
yel2=0;
if(delay10s) next_state=three;
else next_state=two;
end

three: begin
high=3'b100;
farm=3'b010;
red=0;
yel1=0;
yel2=1;
if(delay3s2) next_state=zero;
else next_state=three;
end

default: next_state=zero;
endcase
end

//Counting delay based on clock edge
always@(posedge clk) begin
if(red || yel1 || yel2) 
count<=count+1
if( count==9 && red)
begin
delay10s=1;
delay3s1=0;
delay3s2=0;
count<=0;
end
else if(count==3 && yel1)
begin
delay10s=0;
delay3s1=1;
delay3s2=0;
count<=0;
end
else if(count==3 && yel2)
begin
delay10s=0;
delay3s1=0;
delay3s2=1;
count<=0;
else
begin
delay10s=0;
delay3s1=0;
delay3s2=0;
end
end
endmodule
